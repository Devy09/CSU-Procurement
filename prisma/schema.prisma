datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RequestStatus {
  pending
  reviewing
  approved
  rejected
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OTHER INFO FIELDS
  department  String?
  section     String?
  designation String?
  saino       String?
  alobsno     String?

  purchaseRequests PurchaseRequest[]
}

model PPMP {
  id            String   @id @default(uuid())
  ppmp_item     String
  unit_cost     Decimal  @db.Decimal(10, 2)
  ppmp_category String
  createdAt     DateTime @default(now())
}

model OfficeHeadPPMP {
  id            String   @id @default(uuid())
  ppmp_item     String
  unit_cost     Decimal  @db.Decimal(10, 2)
  ppmp_category String
  createdAt     DateTime @default(now())
}


model PurchaseRequest {
  id           String   @id @default(cuid())
  prno         String   @unique
  department   String
  section      String
  saino        String?
  alobsno      String?
  date         DateTime @default(now())
  purpose      String
  overallTotal Decimal  @db.Decimal(10, 2)

  // Approval statuses
  status                       RequestStatus @default(pending)
  // Procurement Officer Approval
  approvedByProcurementOfficer Boolean       @default(false)
  procurementOfficerName       String?
  procurementOfficerRole       String?
  // Accountant Approval
  approvedByAccountant         Boolean       @default(false)
  accountantName               String?
  accountantRole               String?
  // President Approval
  approvedByPresident          Boolean       @default(false)
  presidentName                 String?
  presidentRole                 String?
  approvedAtProcurementOfficer DateTime?
  approvedAtAccountant         DateTime?
  approvedAtPresident          DateTime?
  rejectedReason               String?

  // Relations
  createdBy   User                  @relation(fields: [createdById], references: [id])
  createdById String
  items       PurchaseRequestItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseRequestItem {
  id          String  @id @default(cuid())
  itemNo      Int
  quantity    Int
  unit        String
  description String
  stockNo     String?
  unitCost    Decimal @db.Decimal(10, 2)
  totalCost   Decimal @db.Decimal(10, 2)

  // Relations
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  purchaseRequestId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseRequestSequence {
  id         String @id @default(cuid())
  year       Int    @unique
  lastNumber Int    @default(0)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
